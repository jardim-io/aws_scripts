#!/bin/bash

set -e
set -o pipefail

. ./bin/aws/utils

check_aws_cli_installed

# Function to clean up resources in case of failure
cleanup() {
  echo "[UTILS] [RDS] An error occurred. Deleting RDS instance..."
  ./bin/aws/rds/instance/delete
}

# Trap any error, and call our cleanup function
trap cleanup ERR

# Source .env file
. .env

# ----------------------------------------------------------------------------
# Create RDS instance
# ----------------------------------------------------------------------------

echo "[UTILS] [RDS] Running RDS creation script for $DB_INSTANCE_ID..."

./bin/aws/rds/instance/create

# ----------------------------------------------------------------------------
# Wait for RDS instance to be available
# ----------------------------------------------------------------------------

DB_STATUS=""

while [ "$DB_STATUS" != "available" ]; do
    echo "[UTILS] [RDS] Waiting for RDS instance to be available..."

    DB_STATUS=$(bin/aws/rds/instance/status)

    sleep 10
done

echo "[UTILS] [RDS] The RDS instance is available."

DB_ARN=$(./bin/aws/rds/instance/describe)

echo "[UTILS] [RDS] The ARN of the RDS instance is: $DB_ARN"

# ----------------------------------------------------------------------------
# Update .env file with RDS instance ARN
# ----------------------------------------------------------------------------

ENV_FILE=".env"
KEY_TO_REPLACE="DB_ARN"

# Check if key exists in .env file
if grep -q "$KEY_TO_REPLACE" $ENV_FILE; then
  # Key found, so update it
  echo "[UTILS] [RDS] Updating .env file with RDS instance ARN..."
  sed -i '.bak' "s/^$KEY_TO_REPLACE=.*/$KEY_TO_REPLACE=$DB_ARN/" $ENV_FILE
else
  # Key not found, so append it
  echo "[UTILS] [RDS] Appending .env file with RDS instance ARN..."
  echo "$KEY_TO_REPLACE=$DB_ARN" >> $ENV_FILE
fi

echo "[UTILS] [RDS] Updated .env file with RDS instance ARN: $DB_ARN"

# Remove the trap since everything was successful
trap - ERR
